cinit - Configuring
===================
Nico Schottelius <nico-cinit__@__schottelius.org>
0.1, for cinit 0.3, Initial version from 2005-05-28
:Author Initials: NS


This documentes describes how to configure cinit.
You should already have cinit installed, otherwise read "cinit - Installing"
first.


General configuration layout
----------------------------
Cinit uses the <<cconfig>> configuration syntax, which means that
the configuration is kept as simple as possible. The following
sections will show you what that means.


Paths
-----
Normally the configuration is kept below '/etc/cinit'
(though you can change this before compiling in conf/cinit_dir).

The full description of the path layout of cinit and how to change it
can be found in 'paths.text'.


Services
--------
cinit is service based. Other init systems use shell
scripts (for instance /etc/rc, /etc/init.d/rc as starters
and /etc/rc*.d/* as "service definitions").

'current-init-problems.text' explains why cinit does *not*
use nor recommends the use of shell scripts.

A service s simply a directory. This directory contains information about

- what should be started when starting the service
- what should be started when stoping the service
- what dependencies the service has
- whether to restart it, when it exits


Full service definition
~~~~~~~~~~~~~~~~~~~~~~~
. A service consists of
   - a base directory (like /etc/cinit/svc/mount/root/)
   - dependency configuration (`needs` and `wants`)
   - start/stop programs (`on` and `off`)
   - respawn flag (`respawn`)


Base directory
^^^^^^^^^^^^^^
You can create the base directory everywhere below /etc/cinit/svc.
You may and it is recommened to create a directory structure
(see 'example-directory-structure.text').


Dependencies
^^^^^^^^^^^^
The subdirectories
- `wants`
- and `needs`
are the two dependency describing directories.

Read 'dependencies.text' for more information.

Respawning
^^^^^^^^^^^
If you create the empty file 'respawn' (adjustable via conf/c_respawn)
the service will be restarted after it exits.

--------------------------------------------------------------------------------
# Tell cinit to respawn the eth0.udhcpc service
touch /etc/cinit/svc/network/eth0.udhcpc
--------------------------------------------------------------------------------


Execution: on and off
^^^^^^^^^^^^^^^^^^^^^
When a service starts, the file `on` in the service
directory is executed. It is ok, if this file is not existing.
When a service stops, the file `off` in the service
directory is executed.

The file with the extension `.params` is used to specify the arguments
to pass. Each line contains exactly one parameter.

The file with the extension `.env` is used to specify the environment
to pass. Each line contains exactly one variable definition in the form
'variable=value'.

. The following six files are possibly used on starting/stoping:
   - ./on            (the program called on startup)
   - ./on.params     (the parameters to pass to the program, see conf/c_params)
   - ./on.env        (the environment to pass to the program, see conf/c_env)
   - ./off           (the program called when shutting down the service)
   - ./off.params    (the parameters to pass to the program)
   - ./on.env        (the environment to pass to the program)

You should have a look at the samples/ directory for examples.

If things are missing, cinit will continue with what's available.
This way you only need the files you use. Some examples:

   /etc/cinit/init:
      ./wants -> services it wants
      ./needs -> services it needs
      That's everything

   /etc/cinit/testsvc:
      on       -> link to program
      on.param -> parameters to program
      respawn  -> restart it
      That's everything, as it has no dependencies
 
   /etc/cinit/fullsvc:
      on          -> program to start when switching on
      on.params   -> parameters to pass to start program
      on.env      -> environment to pass to start program

      respawn     -> respawn on service
      delay       -> wait this time before sending SIGKILL after SIGTERM

      off         -> program to start when switching off
      off.params  -> parameters to pass to stop program
      off.env     -> environment to pass to stop program

      wants/*     -> services it wants before starting (non-critical ones)
      needs/*     -> links to needed services (critical!) before starting


2. Hints

2.0 Service executing / parameters

The on and off files can and should be links to the programs you want
to execute. This way you save yourself loading the big shell (which is
on many Linux systems bash, why so ever, dash does the job as good, still
beeing small).

The on.params and off.params files could also be links to system configuration:

Assume the service is called local-tuning/keyboard. The on script
could look like:

   on -> /bin/loadkeys
   on.params -> /etc/sys/keyboard.mapping

   And /etc/sys/keyboard.mapping would contain only the string
   "dvorak" (or "de-latin1" or "sg-latin1" or ...).


2.1 Daemons

Respawning daemons is a bit more difficult, as daemons do often fork()
(go to background, the calling process exits).

This way cinit cannot watch it directly.

The first solution is to check the documentation of your daemon program,
if it has a switch to disable forking (Please have a look at
daemons.backgrounding for a list of known daemons and their switches
to avoid backgrounding).

The other possibility is to use a program, which will
   a) start the daemon
   b) look into the pidfile of the daemon
   c) will then wait until that pid does not exist anymore
   d) and then it exits and cinit will restart it (goto a) now)

Such a program is included into this cinit release,
though I do not recommend using it. You should better contact the
authors and make them implement a clean non-forking mode.

The name of the program (actually a shell script) is "cinit.wait.for.daemon".

You will use it as the "on" part of the service and you have to add

   a) the pidfile to on.params
   b) the daemon binary

Thus the service would look like:

   svc-broken-daemon/
      on -> /sbin/cinit.wait.for.daemon
      on.params:
         /var/run/apache.pid
         /usr/packages/apache-2.0.51/bin/httpd
         -DSSL

Be aware: This is just a hack, first try to avoid backgrounding
and you won't need this hack!


2.2 Logging

Currently there's no special logging support.
When programs write to stdout, it will be displayed on
the same stdout cinit is connected to
(we don't even open /dev/console - we are too lazy currently).


2.3 Using prepared scripts

In the bin/ directory of this tarball you'll find at least:

   cinit.add.dependency - add a dependency to a service
   cinit.add.getty      - add a new getty
   cinit.create.empty.service - create an empty service
   cinit.reboot         - reboot in /bin/sh
   cinit.remove.getty   - remove a getty service
   cinit.respawn.off    - switch respawing off
   cinit.respawn.on     - switch respawing on
   cinit.shutdown       - shutdown in /bin/sh


Profiles
--------
Profiles allow you to define different startup scenarios and select
those before bootup. Read 'profiles.text' for more information about
profiles.

The profile support was added in cinit-0.0.6.


Examples
--------
Currently there are no example configurations available.
As soon as they are, you will be able to download them at
cinit's homepage.


References
----------
+ [[cconfig]]
