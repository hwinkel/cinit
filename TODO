- Fix SIGCHILD problem:
   - exec_svc wants to waitpid() itself, so SIG_CHILD makes problems
   - respawn_svc: does that need to act on SIGCHLD if the master process
   is still running?
   - kill respawn -> sigchild cleans up, we do not get waitpid perhaps?
- remove umount code?
- remove zombies, but keep away from SIGCHILD problems
- remove mount /etc/cinit/tmp code
   -> how to replace?
- fix bug in Makefile: linking happens twice
- do not kill respawing service, if off exists
- ccontrol
- manpages
- Error codes when shutting down a service?
- Delay dokumentieren
- no_kill dokumentieren
- ddoc zuendefuehren

- remove umount, swapoff?
--> to services?

- on.out, on.err, on.in?
   -> reading/writing from/to files

- Split cservice?
   - ccontrol:
      - reboot
      - shutdown
      - halt
   - cservice
      - (r)estart
      - (e)in/on
      - (a)us/off

-u: daten weg???
--> komplett neu starten, deshalb!

--> Wenn kein ReSPAWN und der Prozess beendet sich nicht,
    dann haengt init!
- implement "no_kill" until cinit-0.2 or 0.3?

Doku!!!

gettys:
http://www.die.net/doc/linux/man/man8/mgetty.8.html, 
http://qingy.sourceforge.net/manual.php

--------------------------------------------------------------------------------
- Source Logic issues
   - remove FIXME entries (and what should be fixed, too)
   - memset for timespecs?
   - move umount, swapoff and remount to off of init?
      -> cleanup sig_reboot.c
   - run_svc:
      o we have many strcat()s, perhaps save length of pathbuf and strncat at
         pathtmp[strlen(pathbuf)] ?
   - do we really need swapoff?
--------------------------------------------------------------------------------
- Documentation
   - Write manpages (use doc/* as base for that)
   - Check Spell and Grammar in documentation
   - write howto:
      o Howto-cinit
      o Howto-cinit-uml
--------------------------------------------------------------------------------
Things I did not do and I don't know whether we have to care about:

- Porting
   - add porting code to other unices?
   - like openssh guys do?

- close(*>2) before forking / executing
   -> close fds, clean environment, etc., ...
   -> do we really need that?
- logging service!
   -> write output $somewhere, wait for syslog?
   -> flush at the end of start-process?
   -> perhaps pipe logging output to a program?

